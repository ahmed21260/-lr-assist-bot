const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const https = require('https');
const moment = require('moment');

// Import modules
const GeoportailService = require('./geoportail');

// Configuration simple pour test
const config = {
  telegram: {
    token: '7583644274:AAHp6JF7VDa9ycKiSPSTs4apS512euatZMw',
    adminChatId: 7648184043
  },
  app: {
    dataPath: './data.json',
    photoDir: './data/photos'
  }
};

// Initialize services with conflict detection
let bot;
try {
  bot = new TelegramBot(config.telegram.token, { 
    polling: {
      interval: 300,
      autoStart: true,
      params: {
        timeout: 10
      }
    }
  });
  
  // Test if bot is working
  bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.response.body.error_code === 409) {
      console.log('‚ö†Ô∏è Une autre instance du bot est d√©j√† en cours d\'ex√©cution.');
      console.log('üîÑ Arr√™t de cette instance pour √©viter le conflit.');
      process.exit(0);
    } else {
      console.error('‚ùå Erreur polling Telegram:', error);
    }
  });
  
} catch (error) {
  console.error('‚ùå Erreur initialisation bot:', error);
  process.exit(1);
}
const geoportal = new GeoportailService();

// Ensure directories exist
const PHOTO_DIR = path.join(__dirname, 'data', 'photos');
if (!fs.existsSync(PHOTO_DIR)) {
  fs.mkdirSync(PHOTO_DIR, { recursive: true });
}

// Load data
function loadData() {
  try {
    const data = JSON.parse(fs.readFileSync(config.app.dataPath, 'utf8'));
    // Ensure all required arrays exist
    if (!data.messages) data.messages = [];
    if (!data.photos) data.photos = [];
    if (!data.locations) data.locations = [];
    if (!data.emergencies) data.emergencies = [];
    if (!data.checklist) data.checklist = {};
    return data;
  } catch {
    return { 
      messages: [], 
      photos: [], 
      locations: [], 
      emergencies: [],
      checklist: {} 
    };
  }
}

// Save data
function saveData(data) {
  fs.writeFileSync(config.app.dataPath, JSON.stringify(data, null, 2));
}

// Menu principal
const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üì∏ Envoyer une photo', 'üìç Partager ma position'],
      ['‚úÖ Checklist s√©curit√©', '‚ö†Ô∏è D√©clencher une urgence'],
      ['üö® Mise hors voie urgente', 'üö™ Portail d\'acc√®s SNCF'],
      ['üìò Fiches techniques', '‚ÑπÔ∏è Aide'],
      ['üìä Historique', 'üîß Param√®tres']
    ],
    resize_keyboard: true
  }
};

// /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || 'utilisateur';
  const userId = msg.from.id.toString();
  
  const welcome = `üëã Bonjour ${userName}, bienvenue sur LR ASSIST !\n\n` +
    `üö¶ Application de terrain pour op√©rateurs ferroviaires\n` +
    `üì± Votre ID: ${userId}\n\n` +
    `Utilise le menu ci-dessous pour acc√©der aux fonctions.`;

  // Save user info locally
  let data = loadData();
  data.messages.push({
    userId,
    userName,
    message: 'Utilisateur connect√©',
    type: 'connection',
    status: 'normal',
    chatId,
    timestamp: Date.now()
  });
  saveData(data);

  bot.sendMessage(chatId, welcome, mainMenu);
});

// Debug logging
bot.on('message', (msg) => {
  const user = msg.from.username || msg.from.first_name || msg.from.id;
  const messageType = msg.photo ? 'PHOTO' : msg.location ? 'LOCATION' : 'TEXT';
  console.log(`üì© ${user} (${msg.chat.id}) => ${messageType}: ${msg.text || '[non-text message]'}`);
});

// Handle text messages
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Utilisateur';
  
  if (!text || text.startsWith('/')) return;

  try {
    switch (text) {
      case 'üì∏ Envoyer une photo':
        bot.sendMessage(chatId, 'üì∏ Envoie ta photo directement ici. Elle sera sauvegard√©e avec m√©tadonn√©es.');
        break;

      case 'üìç Partager ma position':
        bot.sendMessage(chatId, 'üìç Clique pour envoyer ta position GPS. Le PK SNCF sera calcul√© automatiquement üëá', {
          reply_markup: {
            keyboard: [[{ text: "üì° Envoyer ma position", request_location: true }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        });
        break;

      case '‚úÖ Checklist s√©curit√©':
        sendChecklist(chatId);
        break;

      case '‚ö†Ô∏è D√©clencher une urgence':
        await handleEmergency(chatId, userName, userId);
        break;

      case 'üö® Mise hors voie urgente':
        await handleEmergencyDerailment(chatId, userName, userId);
        break;

      case 'üö™ Portail d\'acc√®s SNCF':
        await findNearestAccessPortal(chatId, userName, userId);
        break;

      case 'üìò Fiches techniques':
        sendTechnicalSheets(chatId);
        break;

      case 'üìä Historique':
        sendHistory(chatId, userId);
        break;

      case 'üîß Param√®tres':
        sendSettings(chatId);
        break;

      case '‚ÑπÔ∏è Aide':
        sendHelp(chatId);
        break;

      default:
        // Save regular message locally
        let data = loadData();
        data.messages.push({
          userId,
          userName,
          message: text,
          type: 'message',
          status: 'normal',
          chatId,
          timestamp: Date.now()
        });
        saveData(data);

        bot.sendMessage(chatId, "‚úÖ Message enregistr√©. Utilise le menu pour les actions sp√©cifiques üëá", mainMenu);
    }
  } catch (error) {
    console.error('‚ùå Erreur traitement message:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors du traitement. R√©essayez.", mainMenu);
  }
});

// Handle photos
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Utilisateur';
  const caption = msg.caption || 'Photo sans description';
  
  try {
    console.log('üì∏ Traitement photo re√ßue...');
    
    // Get the highest quality photo
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    const file = await bot.getFile(fileId);
    const filePath = file.file_path;
    
    // Download photo
    const url = `https://api.telegram.org/file/bot${config.telegram.token}/${filePath}`;
    const timestamp = Date.now();
    const filename = `photo_${timestamp}.jpg`;
    const dest = path.join(PHOTO_DIR, filename);
    
    // Download file
    await downloadFile(url, dest);
    
    // Save to local data
    let data = loadData();
    data.photos.push({
      userId,
      userName,
      filename,
      caption,
      timestamp,
      chatId,
      fileSize: fs.statSync(dest).size
    });
    
    data.messages.push({
      userId,
      userName,
      message: `üì∏ ${caption}`,
      type: 'photo',
      status: 'normal',
      photoUrl: `local://${filename}`,
      chatId,
      timestamp
    });
    
    saveData(data);
    
    // Send confirmation
    const confirmationMsg = `üì∏ Photo trait√©e avec succ√®s\n\n` +
      `üìù Description: ${caption}\n` +
      `üìè Taille: ${(fs.statSync(dest).size / 1024).toFixed(2)} KB\n` +
      `üíæ Sauvegard√©e localement`;
    
    bot.sendMessage(chatId, confirmationMsg, mainMenu);
    
  } catch (error) {
    console.error('‚ùå Erreur traitement photo:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors du traitement de la photo. R√©essayez.", mainMenu);
  }
});

// Handle location with precise railway geometry
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Utilisateur';
  const { latitude, longitude } = msg.location;
  
  try {
    console.log('üìç Traitement localisation re√ßue avec g√©om√©trie pr√©cise...');
    
    // Calculate PK SNCF with precise geometry
    const pkResult = await geoportal.calculatePKSNCF(latitude, longitude);
    
    // Get detailed railway line info
    const railwayInfo = await geoportal.getRailwayLineInfo(latitude, longitude);
    
    // Get nearby infrastructure
    const infrastructure = await geoportal.getNearbyInfrastructure(latitude, longitude, 2000);
    
    // Save to local data
    let data = loadData();
    data.locations.push({
      userId,
      userName,
      latitude,
      longitude,
      pkSNCF: pkResult.pk,
      lineId: pkResult.lineId,
      lineName: pkResult.lineName,
      confidence: pkResult.confidence,
      distance: pkResult.distance,
      method: pkResult.method,
      railwayInfo,
      infrastructure,
      timestamp: Date.now(),
      chatId
    });
    
    data.messages.push({
      userId,
      userName,
      message: `üìç Position partag√©e - ${pkResult.pk} (${pkResult.lineName})`,
      type: 'location',
      status: 'normal',
      location: { 
        latitude, 
        longitude, 
        pkSNCF: pkResult.pk,
        lineName: pkResult.lineName,
        confidence: pkResult.confidence
      },
      chatId,
      timestamp: Date.now()
    });
    
    saveData(data);
    
    // Send confirmation with detailed information
    const geoUrl = `https://www.geoportail.gouv.fr/carte?c=${longitude},${latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS`;
    
    let confirmationMsg = `üìç Position re√ßue et trait√©e\n\n` +
      `üìä Coordonn√©es:\n` +
      `‚Ä¢ Latitude: ${latitude.toFixed(6)}\n` +
      `‚Ä¢ Longitude: ${longitude.toFixed(6)}\n\n` +
      `üö¶ Point Kilom√©trique SNCF:\n` +
      `‚Ä¢ PK: ${pkResult.pk}\n` +
      `‚Ä¢ Ligne: ${pkResult.lineName}\n` +
      `‚Ä¢ Direction: ${railwayInfo.direction}\n` +
      `‚Ä¢ Confiance: ${pkResult.confidence}\n` +
      `‚Ä¢ Distance: ${pkResult.distance ? `${Math.round(pkResult.distance)}m` : 'N/A'}\n` +
      `‚Ä¢ M√©thode: ${pkResult.method}\n\n`;
    
    // Add infrastructure information if available
    if (infrastructure.stations.length > 0 || infrastructure.signals.length > 0) {
      confirmationMsg += `üèóÔ∏è Infrastructure proche:\n`;
      if (infrastructure.stations.length > 0) {
        confirmationMsg += `‚Ä¢ Gares: ${infrastructure.stations.length}\n`;
      }
      if (infrastructure.signals.length > 0) {
        confirmationMsg += `‚Ä¢ Signaux: ${infrastructure.signals.length}\n`;
      }
      confirmationMsg += `\n`;
    }
    
    confirmationMsg += `üîó Voir sur Geoportail: ${geoUrl}`;
    
    bot.sendMessage(chatId, confirmationMsg, mainMenu);
    
  } catch (error) {
    console.error('‚ùå Erreur traitement localisation:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors du traitement de la position. R√©essayez.", mainMenu);
  }
});

// Send checklist
function sendChecklist(chatId) {
  const keyboard = [
    [{ text: "‚ùå V√©rifier position train", callback_data: 'check1' }],
    [{ text: "‚ùå Contacter chef chantier", callback_data: 'check2' }],
    [{ text: "‚ùå Activer signalisations", callback_data: 'check3' }],
    [{ text: "‚ùå Bloquer circulation voie", callback_data: 'check4' }],
    [{ text: "‚ùå Confirmer mise hors voie", callback_data: 'check5' }]
  ];
  
  bot.sendMessage(chatId, "‚úÖ Checklist de s√©curit√© ferroviaire :", {
    reply_markup: { inline_keyboard: keyboard }
  });
}

// Handle callback queries (checklist)
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id.toString();
  const userName = query.from.first_name || 'Utilisateur';
  const data = query.data;
  
  try {
    if (data.startsWith('check')) {
      const steps = [
        { code: 'check1', label: "V√©rifier position train" },
        { code: 'check2', label: "Contacter chef chantier" },
        { code: 'check3', label: "Activer signalisations" },
        { code: 'check4', label: "Bloquer circulation voie" },
        { code: 'check5', label: "Confirmer mise hors voie" }
      ];
      
      const step = steps.find(s => s.code === data);
      if (step) {
        // Save checklist action locally
        let fullData = loadData();
        fullData.messages.push({
          userId,
          userName,
          message: `‚úÖ Checklist: ${step.label}`,
          type: 'checklist',
          status: 'normal',
          chatId,
          timestamp: Date.now()
        });
        saveData(fullData);
        
        bot.answerCallbackQuery(query.id, { text: `‚úÖ ${step.label} valid√©` });
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur callback query:', error);
    bot.answerCallbackQuery(query.id, { text: "‚ùå Erreur" });
  }
});

// Handle emergency
async function handleEmergency(chatId, userName, userId) {
  try {
    // Get last known location
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    const alertMsg = `üö® ALERTE D'URGENCE FERROVIAIRE\n\n` +
      `üë§ Op√©rateur: ${userName}\n` +
      `üÜî ID: ${userId}\n` +
      `‚è∞ Heure: ${moment().format('DD/MM/YYYY HH:mm:ss')}\n\n` +
      (lastLocation ? 
        `üìç Derni√®re position connue:\n` +
        `‚Ä¢ PK: ${lastLocation.pkSNCF}\n` +
        `‚Ä¢ Ligne: ${lastLocation.lineName}\n` +
        `‚Ä¢ Coordonn√©es: ${lastLocation.latitude}, ${lastLocation.longitude}\n` +
        `‚Ä¢ Voir sur carte: https://www.geoportail.gouv.fr/carte?c=${lastLocation.longitude},${lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS` :
        `‚ùå Position non disponible. Demander position imm√©diatement.`);
    
    // Save emergency message
    data.emergencies.push({
      userId,
      userName,
      message: 'üö® ALERTE D\'URGENCE D√âCLENCH√âE',
      type: 'emergency',
      status: 'urgent',
      location: lastLocation ? { 
        latitude: lastLocation.latitude, 
        longitude: lastLocation.longitude, 
        pkSNCF: lastLocation.pkSNCF,
        lineName: lastLocation.lineName
      } : null,
      chatId,
      timestamp: Date.now()
    });
    
    data.messages.push({
      userId,
      userName,
      message: 'üö® ALERTE D\'URGENCE D√âCLENCH√âE',
      type: 'emergency',
      status: 'urgent',
      location: lastLocation ? { 
        latitude: lastLocation.latitude, 
        longitude: lastLocation.longitude, 
        pkSNCF: lastLocation.pkSNCF 
      } : null,
      chatId,
      timestamp: Date.now()
    });
    
    saveData(data);
    
    // Send to admin
    bot.sendMessage(config.telegram.adminChatId, alertMsg, { 
      reply_markup: {
        inline_keyboard: [[
          { text: "üìû Contacter op√©rateur", callback_data: `contact_${userId}` }
        ]]
      }
    });
    
    // Confirm to user
    bot.sendMessage(chatId, "üö® Alerte d'urgence envoy√©e aux administrateurs\n\nVotre position a √©t√© transmise. Restez en s√©curit√©.", mainMenu);
    
  } catch (error) {
    console.error('‚ùå Erreur alerte urgence:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors de l'envoi de l'alerte. Contactez directement les secours.", mainMenu);
  }
}

// Handle emergency derailment
async function handleEmergencyDerailment(chatId, userName, userId) {
  try {
    // Get last known location
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    if (!lastLocation) {
      bot.sendMessage(chatId, "‚ùå ERREUR CRITIQUE - Votre position n'est pas connue. Envoyez imm√©diatement votre position GPS pour la mise hors voie d'urgence.", {
        reply_markup: {
          keyboard: [[{ text: "üì° Envoyer ma position URGENT", request_location: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });
      return;
    }
    
    // Calculate nearest access portal with innovative system
    const accessPortal = await findNearestAccessPortalData(lastLocation.latitude, lastLocation.longitude);
    
    const derailmentMsg = `üö® MISE HORS VOIE D'URGENCE\n\n` +
      `üë§ Op√©rateur: ${userName}\n` +
      `üÜî ID: ${userId}\n` +
      `‚è∞ Heure: ${moment().format('DD/MM/YYYY HH:mm:ss')}\n\n` +
      `üìç Position actuelle:\n` +
      `‚Ä¢ PK: ${lastLocation.pkSNCF}\n` +
      `‚Ä¢ Ligne: ${lastLocation.lineName}\n` +
      `‚Ä¢ Coordonn√©es: ${lastLocation.latitude}, ${lastLocation.longitude}\n\n` +
      `üö™ Portail d'acc√®s SNCF le plus proche:\n` +
      `‚Ä¢ Nom: ${accessPortal.name}\n` +
      `‚Ä¢ Type: ${accessPortal.type}\n` +
      `‚Ä¢ Distance: ${accessPortal.distance}m\n` +
      `‚Ä¢ Direction: ${accessPortal.direction}\n` +
      `‚Ä¢ Statut: ${accessPortal.status}\n` +
      `‚Ä¢ Confiance: ${accessPortal.confidence}\n\n` +
      `üîß √âquipements disponibles:\n` +
      `${accessPortal.equipment ? accessPortal.equipment.slice(0, 3).map(eq => `‚Ä¢ ${eq}`).join('\n') : '‚Ä¢ √âquipement standard SNCF'}\n\n` +
      `üö® PROC√âDURE D'URGENCE:\n` +
      `1. √âvacuer imm√©diatement la zone\n` +
      `2. Se diriger vers le portail d'acc√®s\n` +
      `3. Contacter les secours: 112\n` +
      `4. Contacter SNCF: 3635\n` +
      `5. Attendre les instructions\n\n` +
      `üîó Voir sur carte: https://www.geoportail.gouv.fr/carte?c=${lastLocation.longitude},${lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS`;
    
    // Save emergency derailment
    data.emergencies.push({
      userId,
      userName,
      message: 'üö® MISE HORS VOIE D\'URGENCE D√âCLENCH√âE',
      type: 'derailment',
      status: 'critical',
      location: { 
        latitude: lastLocation.latitude, 
        longitude: lastLocation.longitude, 
        pkSNCF: lastLocation.pkSNCF,
        lineName: lastLocation.lineName
      },
      accessPortal,
      chatId,
      timestamp: Date.now()
    });
    
    saveData(data);
    
    // Send to admin
    bot.sendMessage(config.telegram.adminChatId, derailmentMsg, { 
      reply_markup: {
        inline_keyboard: [
          [{ text: "üö® D√©clencher √©vacuation", callback_data: `evacuate_${userId}` }],
          [{ text: "üìû Contacter op√©rateur", callback_data: `contact_${userId}` }]
        ]
      }
    });
    
    // Confirm to user
    bot.sendMessage(chatId, "üö® MISE HORS VOIE D'URGENCE D√âCLENCH√âE - √âvacuez imm√©diatement la zone et dirigez-vous vers le portail d'acc√®s indiqu√©. Les secours ont √©t√© alert√©s.", mainMenu);
    
  } catch (error) {
    console.error('‚ùå Erreur mise hors voie urgence:', error);
    bot.sendMessage(chatId, "‚ùå Erreur critique. Contactez imm√©diatement les secours: 112", mainMenu);
  }
}

// Find nearest access portal
async function findNearestAccessPortal(chatId, userName, userId) {
  try {
    // Get last known location
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    if (!lastLocation) {
      bot.sendMessage(chatId, "‚ùå Votre position n'est pas connue. Envoyez d'abord votre position GPS.", {
        reply_markup: {
          keyboard: [[{ text: "üì° Envoyer ma position", request_location: true }]],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      });
      return;
    }
    
    const accessPortal = await findNearestAccessPortalData(lastLocation.latitude, lastLocation.longitude);
    
    const portalMsg = `üö™ Portail d'acc√®s SNCF le plus proche\n\n` +
      `üìç Depuis votre position:\n` +
      `‚Ä¢ PK: ${lastLocation.pkSNCF}\n` +
      `‚Ä¢ Ligne: ${lastLocation.lineName}\n\n` +
      `üö™ Portail d'acc√®s SNCF:\n` +
      `‚Ä¢ Nom: ${accessPortal.name}\n` +
      `‚Ä¢ Type: ${accessPortal.type}\n` +
      `‚Ä¢ Distance: ${accessPortal.distance}m\n` +
      `‚Ä¢ Direction: ${accessPortal.direction}\n` +
      `‚Ä¢ Statut: ${accessPortal.status}\n` +
      `‚Ä¢ Confiance: ${accessPortal.confidence}\n\n` +
      `üîß √âquipements disponibles:\n` +
      `${accessPortal.equipment ? accessPortal.equipment.slice(0, 3).map(eq => `‚Ä¢ ${eq}`).join('\n') : '‚Ä¢ √âquipement standard SNCF'}\n\n` +
      `‚ö†Ô∏è Restrictions d'acc√®s:\n` +
      `${accessPortal.restrictions ? accessPortal.restrictions.slice(0, 2).map(res => `‚Ä¢ ${res}`).join('\n') : '‚Ä¢ Acc√®s SNCF uniquement'}\n\n` +
      `üìû Contacts d'urgence:\n` +
      `‚Ä¢ SNCF: ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.sncf : '3635'}\n` +
      `‚Ä¢ Secours: ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.secours : '112'}\n\n` +
      `üó∫Ô∏è Voir sur carte: https://www.geoportail.gouv.fr/carte?c=${accessPortal.coordinates ? accessPortal.coordinates.longitude : lastLocation.longitude},${accessPortal.coordinates ? accessPortal.coordinates.latitude : lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS`;
    
    bot.sendMessage(chatId, portalMsg, { 
      disable_web_page_preview: true,
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur recherche portail:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors de la recherche du portail d'acc√®s.", mainMenu);
  }
}

// Find nearest access portal data
async function findNearestAccessPortalData(latitude, longitude) {
  try {
    // Utiliser le syst√®me innovant de portails d'acc√®s SNCF
    const accessPortal = await geoportal.findNearestAccessPortal(latitude, longitude, 'emergency');
    
    return accessPortal;
    
  } catch (error) {
    console.error('‚ùå Erreur calcul portail:', error);
    return {
      name: 'Portail d\'acc√®s SNCF',
      type: 'passage pi√©ton',
      latitude: latitude + 0.001,
      longitude: longitude + 0.001,
      distance: 1000,
      direction: 'Nord',
      status: 'Ouvert',
      pk: 'PK000+000'
    };
  }
}

// Send technical sheets
function sendTechnicalSheets(chatId) {
  const sheets = [
    {
      title: "üìò Fiche Machine CAT M323F",
      content: "Engin : CAT M323F Rail-Route\n‚úÖ Emprise ferroviaire valid√©e\nüîß √âquipements : rototilt, benne preneuse, remorque\nüîí S√©curisation : signalisation, v√©rif OCP\nüìç Position √† envoyer avant intervention."
    },
    {
      title: "üö¶ Proc√©dures de s√©curit√©",
      content: "1. V√©rifier position train\n2. Contacter chef chantier\n3. Activer signalisations\n4. Bloquer circulation voie\n5. Confirmer mise hors voie"
    },
    {
      title: "üìû Contacts d'urgence",
      content: "üö® Urgence : 112\nüö¶ SNCF : 3635\nüë∑ Chef chantier : [Num√©ro local]\nüîß Maintenance : [Num√©ro local]"
    },
    {
      title: "üö® Proc√©dure mise hors voie",
      content: "1. √âvacuer imm√©diatement la zone\n2. Se diriger vers le portail d'acc√®s le plus proche\n3. Contacter les secours : 112\n4. Attendre les instructions des autorit√©s\n5. Ne pas retourner sur les voies"
    }
  ];
  
  for (const sheet of sheets) {
    bot.sendMessage(chatId, `${sheet.title}\n\n${sheet.content}`);
  }
  
  bot.sendMessage(chatId, "üìò Utilisez le menu pour d'autres actions üëá", mainMenu);
}

// Send history
function sendHistory(chatId, userId) {
  try {
    let data = loadData();
    const userMessages = data.messages.filter(m => m.userId === userId).slice(-10);
    
    if (userMessages.length === 0) {
      bot.sendMessage(chatId, "üìä Aucun historique disponible.", mainMenu);
      return;
    }
    
    let historyMsg = "üìä Votre historique r√©cent:\n\n";
    
    userMessages.forEach((msg, index) => {
      const timestamp = moment(msg.timestamp).format('DD/MM HH:mm');
      const typeIcon = msg.type === 'photo' ? 'üì∏' : msg.type === 'location' ? 'üìç' : msg.type === 'emergency' ? 'üö®' : 'üí¨';
      historyMsg += `${index + 1}. ${typeIcon} ${msg.message || 'Sans message'} (${timestamp})\n`;
    });
    
    bot.sendMessage(chatId, historyMsg, mainMenu);
    
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration historique:', error);
    bot.sendMessage(chatId, "‚ùå Erreur lors de la r√©cup√©ration de l'historique.", mainMenu);
  }
}

// Send settings
function sendSettings(chatId) {
  const settingsMsg = "üîß Param√®tres LR ASSIST\n\n" +
    "üì± Notifications : Activ√©es\n" +
    "üìç GPS : Activ√©\n" +
    "üì∏ Upload photos : Activ√©\n" +
    "üö¶ PK SNCF : Calcul automatique\n" +
    "üö® Alertes urgence : Activ√©es\n" +
    "üö™ Portails d'acc√®s : D√©tection automatique\n\n" +
    "Pour modifier les param√®tres, contactez l'administrateur.";
  
  bot.sendMessage(chatId, settingsMsg, mainMenu);
}

// Send help
function sendHelp(chatId) {
  const helpMsg = `‚ÑπÔ∏è Aide LR ASSIST\n\n` +
    `üö¶ Application de terrain pour op√©rateurs ferroviaires\n\n` +
    `üì∏ Photo : Signalement probl√®me avec m√©tadonn√©es\n` +
    `üìç Position : Envoi GPS avec calcul PK SNCF automatique\n` +
    `‚úÖ Checklist : √âtapes s√©curit√© avant intervention\n` +
    `‚ö†Ô∏è Urgence : D√©clenche alerte imm√©diate\n` +
    `üö® Mise hors voie : Proc√©dure d'urgence avec portail d'acc√®s\n` +
    `üö™ Portail d'acc√®s : Trouve le point d'acc√®s SNCF le plus proche\n` +
    `üìò Fiches techniques : Documents machines ferroviaires\n` +
    `üìä Historique : Consultation actions r√©centes\n\n` +
    `üë®‚Äçüîß Compatible : CAT M323F, OCP, signalisation, zone d'emprise ferroviaire\n\n` +
    `üîó Support : Contactez l'administrateur`;
  
  bot.sendMessage(chatId, helpMsg, mainMenu);
}

// Download file utility
function downloadFile(url, dest) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(dest, () => {}); // Delete the file async
      reject(err);
    });
  });
}

// Error handling
bot.on('error', (error) => {
  console.error('‚ùå Erreur bot Telegram:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Arr√™t du bot LR ASSIST...');
  bot.stopPolling();
  process.exit(0);
});

console.log("üö¶ BOT LR ASSIST d√©marr√© (mode local avec g√©om√©trie ferroviaire)");
console.log("üì± En √©coute des messages...");
console.log("üíæ Donn√©es sauvegard√©es localement dans data.json");
console.log("üö® Fonctionnalit√©s d'urgence et portails d'acc√®s activ√©es"); 