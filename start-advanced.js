const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const https = require('https');
const moment = require('moment');

// Import modules
const GeoportailService = require('./geoportail');
const RailwayAccessPortals = require('./railway-access-portals');

// Configuration avanc√©e
const config = {
  telegram: {
    token: '7583644274:AAHp6JF7VDa9ycKiSPSTs4apS512euatZMw',
    adminChatId: 7648184043
  },
  app: {
    dataPath: './data.json',
    photoDir: './data/photos',
    logsDir: './logs'
  },
  railway: {
    maxDistance: 5000, // Distance max pour d√©tection PK
    confidenceThreshold: 0.7
  }
};

// Initialize services
let bot;
try {
  bot = new TelegramBot(config.telegram.token, { 
    polling: {
      interval: 300,
      autoStart: true,
      params: { timeout: 10 }
    }
  });
  
  bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.response.body.error_code === 409) {
      console.log('‚ö†Ô∏è Instance d√©j√† en cours. Arr√™t...');
      process.exit(0);
    } else {
      console.error('‚ùå Erreur polling:', error);
    }
  });
  
} catch (error) {
  console.error('‚ùå Erreur bot:', error);
  process.exit(1);
}

const geoportal = new GeoportailService();
const accessPortals = new RailwayAccessPortals();

// Ensure directories
const dirs = [config.app.photoDir, config.app.logsDir];
dirs.forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// Menu principal avanc√©
const mainMenu = {
  reply_markup: {
    keyboard: [
      ['üì∏ Photo chantier', 'üìç Position GPS'],
      ['üö® Urgence chantier', 'üö™ Portail acc√®s'],
      ['‚úÖ Checklist s√©curit√©', 'üîß √âquipement'],
      ['üìä Rapport chantier', 'üìò Fiches techniques'],
      ['üó∫Ô∏è Carte chantier', '‚öôÔ∏è Param√®tres']
    ],
    resize_keyboard: true
  }
};

// Menu chantier
const chantierMenu = {
  reply_markup: {
    keyboard: [
      ['üèóÔ∏è D√©but chantier', 'üèÅ Fin chantier'],
      ['‚ö†Ô∏è Probl√®me technique', 'üöß Signalisation'],
      ['üìã √âtat √©quipement', 'üë• √âquipe chantier'],
      ['üîô Menu principal']
    ],
    resize_keyboard: true
  }
};

// Load/Save data
function loadData() {
  try {
    const data = JSON.parse(fs.readFileSync(config.app.dataPath, 'utf8'));
    return {
      messages: data.messages || [],
      photos: data.photos || [],
      locations: data.locations || [],
      emergencies: data.emergencies || [],
      chantiers: data.chantiers || [],
      equipments: data.equipments || [],
      checklists: data.checklists || {},
      users: data.users || {}
    };
  } catch {
    return {
      messages: [], photos: [], locations: [], emergencies: [],
      chantiers: [], equipments: [], checklists: {}, users: {}
    };
  }
}

function saveData(data) {
  fs.writeFileSync(config.app.dataPath, JSON.stringify(data, null, 2));
}

// /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || 'Op√©rateur';
  const userId = msg.from.id.toString();
  
  const welcome = `üö¶ *LR ASSIST - Bot Ferroviaire Avanc√©*\n\n` +
    `üëã Bonjour ${userName} !\n` +
    `üÜî ID: \`${userId}\`\n\n` +
    `üöß *Fonctionnalit√©s chantier:*\n` +
    `‚Ä¢ üì∏ Photos avec g√©olocalisation\n` +
    `‚Ä¢ üìç PK SNCF automatique\n` +
    `‚Ä¢ üö™ Portails d'acc√®s intelligents\n` +
    `‚Ä¢ üö® Alertes d'urgence\n` +
    `‚Ä¢ ‚úÖ Checklists s√©curit√©\n` +
    `‚Ä¢ üìä Rapports chantier\n\n` +
    `üîß Compatible: CAT M323F, pelles rail-route, OCP\n\n` +
    `Utilisez le menu pour commencer !`;

  // Save user
  let data = loadData();
  data.users[userId] = {
    name: userName,
    chatId,
    firstSeen: Date.now(),
    lastSeen: Date.now(),
    role: 'operateur',
    permissions: ['chantier', 'urgence', 'photo', 'localisation']
  };
  saveData(data);

  bot.sendMessage(chatId, welcome, { 
    parse_mode: 'Markdown',
    ...mainMenu 
  });
});

// Handle messages
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Op√©rateur';
  
  if (!text || text.startsWith('/')) return;

  console.log(`üì© ${userName} (${userId}) => ${text}`);

  try {
    switch (text) {
      case 'üì∏ Photo chantier':
        bot.sendMessage(chatId, 'üì∏ Envoyez une photo de votre chantier. Elle sera g√©olocalis√©e et analys√©e.');
        break;

      case 'üìç Position GPS':
        bot.sendMessage(chatId, 'üìç Envoyez votre position GPS pour calculer le PK SNCF et trouver le portail d\'acc√®s le plus proche üëá', {
          reply_markup: {
            keyboard: [[{ text: "üì° Envoyer position", request_location: true }]],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        });
        break;

      case 'üö® Urgence chantier':
        await handleChantierEmergency(chatId, userName, userId);
        break;

      case 'üö™ Portail acc√®s':
        await findAccessPortal(chatId, userName, userId);
        break;

      case '‚úÖ Checklist s√©curit√©':
        sendSecurityChecklist(chatId);
        break;

      case 'üîß √âquipement':
        sendEquipmentMenu(chatId);
        break;

      case 'üìä Rapport chantier':
        await generateChantierReport(chatId, userId);
        break;

      case 'üìò Fiches techniques':
        sendTechnicalDocs(chatId);
        break;

      case 'üó∫Ô∏è Carte chantier':
        await sendChantierMap(chatId, userId);
        break;

      case '‚öôÔ∏è Param√®tres':
        sendSettings(chatId);
        break;

      case 'üèóÔ∏è D√©but chantier':
        await startChantier(chatId, userName, userId);
        break;

      case 'üèÅ Fin chantier':
        await endChantier(chatId, userName, userId);
        break;

      case '‚ö†Ô∏è Probl√®me technique':
        await reportTechnicalIssue(chatId, userName, userId);
        break;

      case 'üöß Signalisation':
        await handleSignalisation(chatId, userName, userId);
        break;

      case 'üìã √âtat √©quipement':
        await checkEquipmentStatus(chatId, userId);
        break;

      case 'üë• √âquipe chantier':
        await manageChantierTeam(chatId, userName, userId);
        break;

      case 'üîô Menu principal':
        bot.sendMessage(chatId, 'üîô Retour au menu principal', mainMenu);
        break;

      default:
        // Save message
        let data = loadData();
        data.messages.push({
          userId, userName, message: text, type: 'message',
          status: 'normal', chatId, timestamp: Date.now()
        });
        saveData(data);

        bot.sendMessage(chatId, "‚úÖ Message enregistr√©. Utilisez le menu pour les actions sp√©cifiques üëá", mainMenu);
    }
  } catch (error) {
    console.error('‚ùå Erreur traitement:', error);
    bot.sendMessage(chatId, "‚ùå Erreur. R√©essayez.", mainMenu);
  }
});

// Handle photos with advanced analysis
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Op√©rateur';
  const caption = msg.caption || 'Photo chantier';
  
  try {
    console.log('üì∏ Traitement photo chantier...');
    
    // Get photo
    const fileId = msg.photo[msg.photo.length - 1].file_id;
    const file = await bot.getFile(fileId);
    const url = `https://api.telegram.org/file/bot${config.telegram.token}/${file.file_path}`;
    
    // Download
    const timestamp = Date.now();
    const filename = `chantier_${timestamp}.jpg`;
    const dest = path.join(config.app.photoDir, filename);
    await downloadFile(url, dest);
    
    // Get last location for geolocation
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    // Save photo with metadata
    const photoData = {
      userId, userName, filename, caption, timestamp, chatId,
      fileSize: fs.statSync(dest).size,
      location: lastLocation ? {
        latitude: lastLocation.latitude,
        longitude: lastLocation.longitude,
        pkSNCF: lastLocation.pkSNCF,
        lineName: lastLocation.lineName
      } : null,
      type: 'chantier',
      analysis: {
        timestamp: Date.now(),
        status: 'pending'
      }
    };
    
    data.photos.push(photoData);
    data.messages.push({
      userId, userName, message: `üì∏ ${caption}`,
      type: 'photo', status: 'normal',
      photoUrl: `local://${filename}`, chatId, timestamp
    });
    saveData(data);
    
    // Send confirmation with analysis
    const analysisMsg = `üì∏ *Photo chantier trait√©e*\n\n` +
      `üìù Description: ${caption}\n` +
      `üìè Taille: ${(fs.statSync(dest).size / 1024).toFixed(2)} KB\n` +
      `üíæ Sauvegard√©e localement\n` +
      (lastLocation ? 
        `üìç G√©olocalis√©e: ${lastLocation.pkSNCF} (${lastLocation.lineName})\n` :
        `‚ö†Ô∏è Pas de g√©olocalisation disponible\n`);
    
    bot.sendMessage(chatId, analysisMsg, { 
      parse_mode: 'Markdown',
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur photo:', error);
    bot.sendMessage(chatId, "‚ùå Erreur traitement photo. R√©essayez.", mainMenu);
  }
});

// Handle location with advanced PK calculation
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'Op√©rateur';
  const { latitude, longitude } = msg.location;
  
  try {
    // Calculate PK SNCF
    const pkResult = await geoportal.calculatePKSNCF(latitude, longitude);
    // Find nearest access portal
    const accessPortal = await accessPortals.findNearestAccessPortal(latitude, longitude, 'emergency');
    // Save location
    let data = loadData();
    data.locations.push({
      userId, userName, latitude, longitude,
      pkSNCF: pkResult.pk,
      pkEstime: pkResult.method && pkResult.method.toLowerCase().includes('estimation'),
      confidence: pkResult.confidence,
      distance: pkResult.distance,
      method: pkResult.method,
      accessPortal, timestamp: Date.now(), chatId
    });
    saveData(data);
    // Message PK
    let pkMsg = `‚Ä¢ PK: ${pkResult.pk}`;
    if (pkResult.method && pkResult.method.toLowerCase().includes('estimation')) {
      pkMsg += " (estim√©)";
    }
    // Message portail
    let portalMsg = '';
    if (accessPortal && accessPortal.name === 'Aucun portail SNCF proche') {
      portalMsg = `üö´ Aucun portail SNCF n'est disponible √† proximit√© (moins de 5 km).`;
    } else {
      portalMsg = `üö™ Portail d'acc√®s SNCF le plus proche :\n` +
        `‚Ä¢ Nom: ${accessPortal.name}\n` +
        `‚Ä¢ Type: ${accessPortal.type || 'N/A'}\n` +
        `‚Ä¢ Distance: ${accessPortal.distance !== null ? accessPortal.distance + 'm' : 'N/A'}\n` +
        `‚Ä¢ Statut: ${accessPortal.status || 'N/A'}\n` +
        `‚Ä¢ Confiance: ${accessPortal.confidence || 'N/A'}\n` +
        `‚Ä¢ √âquipements: ${(accessPortal.equipment && accessPortal.equipment.length > 0) ? accessPortal.equipment.slice(0, 3).map(eq => `- ${eq}`).join(' ') : 'N/A'}\n` +
        `‚Ä¢ Contacts d'urgence: SNCF ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.sncf : '3635'}, Secours ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.secours : '112'}`;
    }
    bot.sendMessage(chatId, `üìç Position enregistr√©e :\n${pkMsg}\n\n${portalMsg}`, { parse_mode: 'Markdown', ...mainMenu });
  } catch (error) {
    console.error('‚ùå Erreur localisation:', error);
    bot.sendMessage(chatId, "‚ùå Erreur traitement position. R√©essayez.", mainMenu);
  }
});

// Advanced functions
async function handleChantierEmergency(chatId, userName, userId) {
  try {
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    if (!lastLocation) {
      bot.sendMessage(chatId, "‚ùå Position non disponible. Envoyez d'abord votre position GPS.", {
        reply_markup: {
          keyboard: [[{ text: "üì° Envoyer position URGENT", request_location: true }]],
          resize_keyboard: true, one_time_keyboard: true
        }
      });
      return;
    }
    
    const accessPortal = await accessPortals.findNearestAccessPortal(
      lastLocation.latitude, lastLocation.longitude, 'emergency'
    );
    
    const emergencyMsg = `üö® *URGENCE CHANTIER FERROVIAIRE*\n\n` +
      `üë§ Op√©rateur: ${userName}\n` +
      `üÜî ID: \`${userId}\`\n` +
      `‚è∞ Heure: ${moment().format('DD/MM/YYYY HH:mm:ss')}\n\n` +
      `üìç *Position chantier:*\n` +
      `‚Ä¢ PK: \`${lastLocation.pkSNCF}\`\n` +
      `‚Ä¢ Ligne: ${lastLocation.lineName}\n` +
      `‚Ä¢ Coordonn√©es: ${lastLocation.latitude}, ${lastLocation.longitude}\n\n` +
      `üö™ *Portail d'acc√®s d'urgence:*\n` +
      `‚Ä¢ Nom: ${accessPortal.name}\n` +
      `‚Ä¢ Distance: ${accessPortal.distance}m\n` +
      `‚Ä¢ Direction: ${accessPortal.direction}\n` +
      `‚Ä¢ Statut: ${accessPortal.status}\n\n` +
      `üö® *PROC√âDURE D'URGENCE:*\n` +
      `1. Arr√™ter imm√©diatement les travaux\n` +
      `2. S√©curiser la zone\n` +
      `3. √âvacuer vers le portail d'acc√®s\n` +
      `4. Contacter les secours: 112\n` +
      `5. Contacter SNCF: 3635\n\n` +
      `üîó [Voir sur carte](https://www.geoportail.gouv.fr/carte?c=${lastLocation.longitude},${lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS)`;
    
    // Save emergency
    data.emergencies.push({
      userId, userName, message: 'üö® URGENCE CHANTIER D√âCLENCH√âE',
      type: 'chantier_emergency', status: 'critical',
      location: { latitude: lastLocation.latitude, longitude: lastLocation.longitude, pkSNCF: lastLocation.pkSNCF },
      accessPortal, chatId, timestamp: Date.now()
    });
    saveData(data);
    
    // Send to admin
    bot.sendMessage(config.telegram.adminChatId, emergencyMsg, { 
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: "üö® D√©clencher √©vacuation", callback_data: `evacuate_${userId}` }],
          [{ text: "üìû Contacter op√©rateur", callback_data: `contact_${userId}` }],
          [{ text: "üöß Arr√™ter chantier", callback_data: `stop_chantier_${userId}` }]
        ]
      }
    });
    
    bot.sendMessage(chatId, "üö® *URGENCE CHANTIER D√âCLENCH√âE* - Arr√™tez imm√©diatement les travaux et √©vacuez la zone !", {
      parse_mode: 'Markdown',
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur urgence:', error);
    bot.sendMessage(chatId, "‚ùå Erreur. Contactez directement les secours: 112", mainMenu);
  }
}

async function findAccessPortal(chatId, userName, userId) {
  try {
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    if (!lastLocation) {
      bot.sendMessage(chatId, "‚ùå Position non disponible. Envoyez d'abord votre position GPS.", {
        reply_markup: {
          keyboard: [[{ text: "üì° Envoyer position", request_location: true }]],
          resize_keyboard: true, one_time_keyboard: true
        }
      });
      return;
    }
    
    const accessPortal = await accessPortals.findNearestAccessPortal(
      lastLocation.latitude, lastLocation.longitude, 'emergency'
    );
    
    const portalMsg = `üö™ *Portail d'acc√®s SNCF le plus proche*\n\n` +
      `üìç *Depuis votre position:*\n` +
      `‚Ä¢ PK: \`${lastLocation.pkSNCF}\`\n` +
      `‚Ä¢ Ligne: ${lastLocation.lineName}\n\n` +
      `üö™ *Portail d'acc√®s SNCF:*\n` +
      `‚Ä¢ Nom: ${accessPortal.name}\n` +
      `‚Ä¢ Type: ${accessPortal.type}\n` +
      `‚Ä¢ Distance: ${accessPortal.distance}m\n` +
      `‚Ä¢ Direction: ${accessPortal.direction}\n` +
      `‚Ä¢ Statut: ${accessPortal.status}\n` +
      `‚Ä¢ Confiance: ${accessPortal.confidence}\n\n` +
      `üîß *√âquipements disponibles:*\n` +
      `${accessPortal.equipment ? accessPortal.equipment.slice(0, 3).map(eq => `‚Ä¢ ${eq}`).join('\n') : '‚Ä¢ √âquipement standard SNCF'}\n\n` +
      `‚ö†Ô∏è *Restrictions d'acc√®s:*\n` +
      `${accessPortal.restrictions ? accessPortal.restrictions.slice(0, 2).map(res => `‚Ä¢ ${res}`).join('\n') : '‚Ä¢ Acc√®s SNCF uniquement'}\n\n` +
      `üìû *Contacts d'urgence:*\n` +
      `‚Ä¢ SNCF: ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.sncf : '3635'}\n` +
      `‚Ä¢ Secours: ${accessPortal.emergencyContacts ? accessPortal.emergencyContacts.secours : '112'}\n\n` +
      `üó∫Ô∏è [Voir sur carte](https://www.geoportail.gouv.fr/carte?c=${accessPortal.coordinates ? accessPortal.coordinates.longitude : lastLocation.longitude},${accessPortal.coordinates ? accessPortal.coordinates.latitude : lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS)`;
    
    bot.sendMessage(chatId, portalMsg, { 
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur portail:', error);
    bot.sendMessage(chatId, "‚ùå Erreur recherche portail.", mainMenu);
  }
}

function sendSecurityChecklist(chatId) {
  const keyboard = [
    [{ text: "‚ùå V√©rifier position train", callback_data: 'check1' }],
    [{ text: "‚ùå Contacter chef chantier", callback_data: 'check2' }],
    [{ text: "‚ùå Activer signalisations", callback_data: 'check3' }],
    [{ text: "‚ùå Bloquer circulation voie", callback_data: 'check4' }],
    [{ text: "‚ùå V√©rifier √©quipement", callback_data: 'check5' }],
    [{ text: "‚ùå Confirmer mise hors voie", callback_data: 'check6' }]
  ];
  
  bot.sendMessage(chatId, "‚úÖ *Checklist de s√©curit√© chantier ferroviaire* :", {
    parse_mode: 'Markdown',
    reply_markup: { inline_keyboard: keyboard }
  });
}

function sendEquipmentMenu(chatId) {
  const keyboard = [
    [{ text: "üîß CAT M323F", callback_data: 'equip_cat' }],
    [{ text: "üöß Signalisation", callback_data: 'equip_signal' }],
    [{ text: "üõ°Ô∏è √âquipement s√©curit√©", callback_data: 'equip_securite' }],
    [{ text: "üìã √âtat g√©n√©ral", callback_data: 'equip_etat' }]
  ];
  
  bot.sendMessage(chatId, "üîß *Gestion √©quipement chantier* :", {
    parse_mode: 'Markdown',
    reply_markup: { inline_keyboard: keyboard }
  });
}

async function generateChantierReport(chatId, userId) {
  try {
    let data = loadData();
    const userMessages = data.messages.filter(m => m.userId === userId).slice(-20);
    const userPhotos = data.photos.filter(p => p.userId === userId).slice(-10);
    const userLocations = data.locations.filter(l => l.userId === userId).slice(-5);
    
    let report = `üìä *Rapport chantier - ${moment().format('DD/MM/YYYY')}*\n\n`;
    
    if (userLocations.length > 0) {
      const lastLocation = userLocations[userLocations.length - 1];
      report += `üìç *Derni√®re position:*\n` +
        `‚Ä¢ PK: \`${lastLocation.pkSNCF}\`\n` +
        `‚Ä¢ Ligne: ${lastLocation.lineName}\n` +
        `‚Ä¢ Heure: ${moment(lastLocation.timestamp).format('HH:mm')}\n\n`;
    }
    
    report += `üì∏ Photos: ${userPhotos.length}\n` +
      `üìç Positions: ${userLocations.length}\n` +
      `üí¨ Messages: ${userMessages.length}\n\n` +
      `üìà *Activit√© r√©cente:*\n`;
    
    userMessages.slice(-5).forEach((msg, index) => {
      const time = moment(msg.timestamp).format('HH:mm');
      const icon = msg.type === 'photo' ? 'üì∏' : msg.type === 'location' ? 'üìç' : 'üí¨';
      report += `${index + 1}. ${icon} ${msg.message || 'Action'} (${time})\n`;
    });
    
    bot.sendMessage(chatId, report, { 
      parse_mode: 'Markdown',
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur rapport:', error);
    bot.sendMessage(chatId, "‚ùå Erreur g√©n√©ration rapport.", mainMenu);
  }
}

function sendTechnicalDocs(chatId) {
  const docs = [
    {
      title: "üìò CAT M323F - Fiche technique",
      content: "üöß *Engin rail-route CAT M323F*\n\n" +
        "‚úÖ Emprise ferroviaire valid√©e\n" +
        "üîß √âquipements: rototilt, benne preneuse\n" +
        "üîí S√©curisation: signalisation, v√©rif OCP\n" +
        "üìç Position √† envoyer avant intervention\n" +
        "‚ö†Ô∏è Respect proc√©dures SNCF obligatoire"
    },
    {
      title: "üö¶ Proc√©dures de s√©curit√©",
      content: "üö¶ *Proc√©dures chantier ferroviaire*\n\n" +
        "1. V√©rifier position train\n" +
        "2. Contacter chef chantier\n" +
        "3. Activer signalisations\n" +
        "4. Bloquer circulation voie\n" +
        "5. V√©rifier √©quipement\n" +
        "6. Confirmer mise hors voie"
    },
    {
      title: "üìû Contacts d'urgence",
      content: "üìû *Contacts chantier*\n\n" +
        "üö® Urgence: 112\n" +
        "üö¶ SNCF: 3635\n" +
        "üë∑ Chef chantier: [Local]\n" +
        "üîß Maintenance: [Local]\n" +
        "üöß Signalisation: [Local]"
    }
  ];
  
  docs.forEach(doc => {
    bot.sendMessage(chatId, doc.content, { parse_mode: 'Markdown' });
  });
  
  bot.sendMessage(chatId, "üìò Utilisez le menu pour d'autres actions üëá", mainMenu);
}

async function sendChantierMap(chatId, userId) {
  try {
    let data = loadData();
    const lastLocation = data.locations.filter(l => l.userId === userId).pop();
    
    if (!lastLocation) {
      bot.sendMessage(chatId, "‚ùå Aucune position disponible. Envoyez d'abord votre position GPS.");
      return;
    }
    
    const mapUrl = `https://www.geoportail.gouv.fr/carte?c=${lastLocation.longitude},${lastLocation.latitude}&z=19&l=TRANSPORTNETWORKS.RAILWAYS`;
    
    const mapMsg = `üó∫Ô∏è *Carte chantier*\n\n` +
      `üìç Position: \`${lastLocation.pkSNCF}\`\n` +
      `üö¶ Ligne: ${lastLocation.lineName}\n` +
      `üîó [Ouvrir carte Geoportail](${mapUrl})\n\n` +
      `üì± Utilisez cette carte pour:\n` +
      `‚Ä¢ Localiser votre chantier\n` +
      `‚Ä¢ Identifier les voies\n` +
      `‚Ä¢ Rep√©rer les acc√®s\n` +
      `‚Ä¢ Planifier les interventions`;
    
    bot.sendMessage(chatId, mapMsg, { 
      parse_mode: 'Markdown',
      ...mainMenu 
    });
    
  } catch (error) {
    console.error('‚ùå Erreur carte:', error);
    bot.sendMessage(chatId, "‚ùå Erreur g√©n√©ration carte.", mainMenu);
  }
}

function sendSettings(chatId) {
  const settingsMsg = "‚öôÔ∏è *Param√®tres LR ASSIST*\n\n" +
    "üì± Notifications: Activ√©es\n" +
    "üìç GPS: Activ√©\n" +
    "üì∏ Upload photos: Activ√©\n" +
    "üö¶ PK SNCF: Calcul automatique\n" +
    "üö® Alertes urgence: Activ√©es\n" +
    "üö™ Portails d'acc√®s: D√©tection automatique\n" +
    "üìä Rapports: G√©n√©ration automatique\n\n" +
    "üîß Compatible: CAT M323F, pelles rail-route\n" +
    "üìû Support: Contactez l'administrateur";
  
  bot.sendMessage(chatId, settingsMsg, { 
    parse_mode: 'Markdown',
    ...mainMenu 
  });
}

// Utility functions
function downloadFile(url, dest) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(dest);
    https.get(url, (response) => {
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', (err) => {
      fs.unlink(dest, () => {});
      reject(err);
    });
  });
}

// Handle callbacks
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id.toString();
  const userName = query.from.first_name || 'Op√©rateur';
  const data = query.data;
  
  try {
    if (data.startsWith('check')) {
      const steps = [
        { code: 'check1', label: "V√©rifier position train" },
        { code: 'check2', label: "Contacter chef chantier" },
        { code: 'check3', label: "Activer signalisations" },
        { code: 'check4', label: "Bloquer circulation voie" },
        { code: 'check5', label: "V√©rifier √©quipement" },
        { code: 'check6', label: "Confirmer mise hors voie" }
      ];
      
      const step = steps.find(s => s.code === data);
      if (step) {
        let fullData = loadData();
        fullData.messages.push({
          userId, userName, message: `‚úÖ Checklist: ${step.label}`,
          type: 'checklist', status: 'normal', chatId, timestamp: Date.now()
        });
        saveData(fullData);
        
        bot.answerCallbackQuery(query.id, { text: `‚úÖ ${step.label} valid√©` });
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur callback:', error);
    bot.answerCallbackQuery(query.id, { text: "‚ùå Erreur" });
  }
});

// Error handling
bot.on('error', (error) => {
  console.error('‚ùå Erreur bot:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Arr√™t du bot LR ASSIST avanc√©...');
  bot.stopPolling();
  process.exit(0);
});

console.log("üö¶ BOT LR ASSIST AVANC√â d√©marr√©");
console.log("üì± En √©coute des messages chantier...");
console.log("üíæ Donn√©es sauvegard√©es localement");
console.log("üö® Fonctionnalit√©s d'urgence et portails d'acc√®s activ√©es");
console.log("üîß Compatible: CAT M323F, pelles rail-route, OCP"); 